#+TITLE: Junhao's Emacs Config
#+STARTUP: overview
#Based on Sacha Chua's config
#TODO: use-package, helm, eshell, org: agenda+babel, YASnippets!!<<, etc

* Basic Config
** Personal Info
#+begin_src emacs-lisp
  (setq user-full-name "Junhao Dong"
        user-mail-address "junhao.dong96@gmail.com")
#+end_src

** Setup Package Install
#+begin_src emacs-lisp
  (defun sacha/package-install (package &optional repository)
    "Install PACKAGE if it has not yet been installed.
     If REPOSITORY is specified, use that."
    (unless (package-installed-p package)
      (let ((package-archives (if repository
                                  (list (assoc repository package-archives))
                                package-archives)))
      (package-install package))))
  (sacha/package-install 'use-package)
  (require 'use-package)
#+end_src

** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms 
        '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Interface Settings
#+begin_src emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (menu-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src

** Custom Key Bindings
*** General
#+begin_src emacs-lisp
  (global-set-key "\C-w" 'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
#+end_src

*** Org Mode
#+begin_src emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src
** Modes
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src

** Theme
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/color-theme-solarized")
  (load-theme 'solarized-light t)
#+end_src

** UTF-8
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** Replace Yes-No w/ Y-N
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Miscellaneous
#+begin_src emacs-lisp
  (transient-mark-mode 1)
  (show-paren-mode 1)
#+end_src
   
* Programming
** Autocomplete
#+begin_src emacs-lisp
  (sacha/package-install 'auto-complete)
  (use-package auto-complete
    :init
    (progn
      (require 'auto-complete-config)
      (ac-config-default)
      (setq ac-auto-show-menu t
  	  ac-quick-help-delay 0.5
            ac-sources '(
  		  ac-source-symbols
  		  ac-source-words-in-same-mode-buffers
  		  ac-source-functions
  		  ac-source-variables
  		  ac-source-dictionary
  		  ac-source-filename
  		  ac-source-yasnippet
  		  ))
      (auto-complete-mode t)))
#+end_src

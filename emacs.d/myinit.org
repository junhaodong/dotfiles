#+TITLE: Junhao's Emacs Config
#+STARTUP: overview
Based on Sacha Chua's and Mike Zamansky's config

* Basic Config
** Personal Info
#+begin_src emacs-lisp
  (setq user-full-name "Junhao Dong"
	user-mail-address "junhao.dong96@gmail.com")
#+end_src

** Setup Package Install
#+begin_src emacs-lisp
  (defun sacha/package-install (package &optional repository)
    "Install PACKAGE if it has not yet been installed.
     If REPOSITORY is specified, use that."
    (unless (package-installed-p package)
      (let ((package-archives (if repository
				  (list (assoc repository package-archives))
				package-archives)))
      (package-install package))))
  (sacha/package-install 'use-package)
  (require 'use-package)
#+end_src

** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups/")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms 
	'((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Interface Settings
#+begin_src emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (menu-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src

** Key Bindings to Kill
#+begin_src emacs-lisp
  (global-set-key "\C-w" 'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
#+end_src
** Theme
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (load-theme 'solarized t)

  ;; Light emacs in GUI
  ;; Dark in terminal
;(add-hook 'after-make-frame-functions
;          (lambda (frame)
;            (let ((mode (if (display-graphic-p frame) 'dark 'dark)))
;              (set-frame-parameter frame 'background-mode mode)
;              (set-terminal-parameter frame 'background-mode mode))
;            (enable-theme 'solarized)))
#+end_src

** Mode Line
*** Compact Mode Line
#+begin_src emacs-lisp
  (sacha/package-install 'smart-mode-line)
  (use-package smart-mode-line
    :init
    (progn
      (setq-default mode-line-format 
		  '("%e"
		    mode-line-front-space
		    mode-line-mule-info
		    mode-line-client
		    mode-line-modified
		    mode-line-remote
		    mode-line-frame-identification
		    mode-line-buffer-identification
		    "	"
		    mode-line-position
		    (vc-mode vc-mode)
		    "  "
		    mode-line-modes
		    mode-line-misc-info
		    mode-line-end-spaces))))

#+end_src

*** Hide Minor Modes
#+begin_src emacs-lisp :tangle no
  (require 'diminish)
  (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
  (eval-after-load "smartparens" '(diminish 'smartparens-mode))
  (diminish 'visual-line-mode)
#+end_src

** Replace Yes-No w/ Y-N
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** UTF-8
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

** Miscellaneous
#+begin_src emacs-lisp
  (transient-mark-mode 1)
  (show-paren-mode 1)
#+end_src
   
* Navigation
** Pop to Mark
#+begin_src emacs-lisp
  (bind-key "C-x p" 'pop-to-mark-command)
  (setq set-mark-command-repeat-pop t)
#+end_src

* Org
** Key Bindings
#+begin_src emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src

** Structure Templates
#+begin_src emacs-lisp
  (setq org-structure-template-alist 
	'(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
	  ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
	  ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
	  ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
	  ("H" "#+html: " "<literal style=\"html\">?</literal>")
	  ("a" "#+begin_ascii\n?\n#+end_ascii")
	  ("i" "#+index: ?" "#+index: ?")))
#+end_src
* Programming
** Tabbing
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+end_src

** Autocomplete
#+begin_src emacs-lisp
  (sacha/package-install 'auto-complete)
  (use-package auto-complete
    :init
    (progn
      (require 'auto-complete-config)
      (ac-config-default)
      (setq ac-auto-show-menu t
  	  ac-quick-help-delay 0.5
            ac-sources '(
  		  ac-source-symbols
  		  ac-source-words-in-same-mode-buffers
  		  ac-source-functions
  		  ac-source-variables
  		  ac-source-dictionary
  		  ac-source-filename
  		  ac-source-yasnippet
  		  ))
      (auto-complete-mode t)))
#+end_src

** Smartparens
#+begin_src emacs-lisp
(sacha/package-install 'smartparens)
(use-package smartparens 
  :init
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t) ;; Highlights matching pairs

    ;; Pair management
    (sp-local-tag '(sgml-mode html-mode web-mode) 
                  "<" "<_>" "</_>" :transform 'sp-match-sgml-tags)
    (sp-local-tag '(tex-mode plain-tex-mode latex-mode) 
    	        "\\b" "\\begin{_}" "\\end{_}")
  
    (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (sacha/package-install 'yasnippet)
  (sacha/package-install 'java-snippets)
  (use-package yasnippet
    :init
    (progn
      (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
      (yas-global-mode t)))
#+end_src

** Javascript
#+begin_src emacs-lisp
  (sacha/package-install 'json-mode)
  (sacha/package-install 'js2-mode)
  (sacha/package-install 'ac-js2)
  (sacha/package-install 'tern)
  (sacha/package-install 'tern-auto-complete)
  
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  
  (use-package tern
    :init
    (progn
    (tern-ac-setup)
    (add-hook 'js-mode-hook 'tern-ac-setup 'tern-mode)))
  
  (add-hook 'js2-mode-hook 'tern-ac-setup)
  (add-hook 'js2-mode-hook 'tern-mode)
  (use-package js2-mode)
#+end_src

** Web
#+begin_src emacs-lisp
  (sacha/package-install 'web-mode)
  (sacha/package-install 'ac-html)
  (use-package web-mode
    :init
    (progn
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (setq web-mode-engines-alist
                                  '(("underscorejs"    . "\\.js\\'")
  				  ("django"  . "\\.html\\.")))))
  (use-package ac-html
   :init 
    (progn
    (add-to-list 'web-mode-ac-sources-alist
  	       '("html" . (ac-source-html-tag
  			   ac-source-html-attribute)))))
#+end_src
